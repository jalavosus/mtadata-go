// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services.proto

package mtadatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MtaDataServiceClient is the client API for MtaDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MtaDataServiceClient interface {
	GetStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*StationResult, error)
	GetStations(ctx context.Context, in *StationsQuery, opts ...grpc.CallOption) (*StationsResult, error)
	GetUpcomingTrains(ctx context.Context, in *UpcomingTrainsRequest, opts ...grpc.CallOption) (*UpcomingTrainsResult, error)
	GetStationComplex(ctx context.Context, in *StationComplexRequest, opts ...grpc.CallOption) (*StationComplexResult, error)
	GetStationComplexes(ctx context.Context, in *StationComplexesQuery, opts ...grpc.CallOption) (*StationComplexesResult, error)
	GetAllRoutes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRoutes, error)
	GetAllBoroughs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBoroughs, error)
	GetAllDivisions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllDivisions, error)
	GetAllStructures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllStructures, error)
}

type mtaDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMtaDataServiceClient(cc grpc.ClientConnInterface) MtaDataServiceClient {
	return &mtaDataServiceClient{cc}
}

func (c *mtaDataServiceClient) GetStation(ctx context.Context, in *StationRequest, opts ...grpc.CallOption) (*StationResult, error) {
	out := new(StationResult)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetStations(ctx context.Context, in *StationsQuery, opts ...grpc.CallOption) (*StationsResult, error) {
	out := new(StationsResult)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetStations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetUpcomingTrains(ctx context.Context, in *UpcomingTrainsRequest, opts ...grpc.CallOption) (*UpcomingTrainsResult, error) {
	out := new(UpcomingTrainsResult)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetUpcomingTrains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetStationComplex(ctx context.Context, in *StationComplexRequest, opts ...grpc.CallOption) (*StationComplexResult, error) {
	out := new(StationComplexResult)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetStationComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetStationComplexes(ctx context.Context, in *StationComplexesQuery, opts ...grpc.CallOption) (*StationComplexesResult, error) {
	out := new(StationComplexesResult)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetStationComplexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetAllRoutes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRoutes, error) {
	out := new(AllRoutes)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetAllRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetAllBoroughs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBoroughs, error) {
	out := new(AllBoroughs)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetAllBoroughs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetAllDivisions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllDivisions, error) {
	out := new(AllDivisions)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetAllDivisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mtaDataServiceClient) GetAllStructures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllStructures, error) {
	out := new(AllStructures)
	err := c.cc.Invoke(ctx, "/mtadata.v1.MtaDataService/GetAllStructures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MtaDataServiceServer is the server API for MtaDataService service.
// All implementations must embed UnimplementedMtaDataServiceServer
// for forward compatibility
type MtaDataServiceServer interface {
	GetStation(context.Context, *StationRequest) (*StationResult, error)
	GetStations(context.Context, *StationsQuery) (*StationsResult, error)
	GetUpcomingTrains(context.Context, *UpcomingTrainsRequest) (*UpcomingTrainsResult, error)
	GetStationComplex(context.Context, *StationComplexRequest) (*StationComplexResult, error)
	GetStationComplexes(context.Context, *StationComplexesQuery) (*StationComplexesResult, error)
	GetAllRoutes(context.Context, *emptypb.Empty) (*AllRoutes, error)
	GetAllBoroughs(context.Context, *emptypb.Empty) (*AllBoroughs, error)
	GetAllDivisions(context.Context, *emptypb.Empty) (*AllDivisions, error)
	GetAllStructures(context.Context, *emptypb.Empty) (*AllStructures, error)
	mustEmbedUnimplementedMtaDataServiceServer()
}

// UnimplementedMtaDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMtaDataServiceServer struct {
}

func (UnimplementedMtaDataServiceServer) GetStation(context.Context, *StationRequest) (*StationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStation not implemented")
}
func (UnimplementedMtaDataServiceServer) GetStations(context.Context, *StationsQuery) (*StationsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStations not implemented")
}
func (UnimplementedMtaDataServiceServer) GetUpcomingTrains(context.Context, *UpcomingTrainsRequest) (*UpcomingTrainsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingTrains not implemented")
}
func (UnimplementedMtaDataServiceServer) GetStationComplex(context.Context, *StationComplexRequest) (*StationComplexResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationComplex not implemented")
}
func (UnimplementedMtaDataServiceServer) GetStationComplexes(context.Context, *StationComplexesQuery) (*StationComplexesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStationComplexes not implemented")
}
func (UnimplementedMtaDataServiceServer) GetAllRoutes(context.Context, *emptypb.Empty) (*AllRoutes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoutes not implemented")
}
func (UnimplementedMtaDataServiceServer) GetAllBoroughs(context.Context, *emptypb.Empty) (*AllBoroughs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBoroughs not implemented")
}
func (UnimplementedMtaDataServiceServer) GetAllDivisions(context.Context, *emptypb.Empty) (*AllDivisions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDivisions not implemented")
}
func (UnimplementedMtaDataServiceServer) GetAllStructures(context.Context, *emptypb.Empty) (*AllStructures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStructures not implemented")
}
func (UnimplementedMtaDataServiceServer) mustEmbedUnimplementedMtaDataServiceServer() {}

// UnsafeMtaDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MtaDataServiceServer will
// result in compilation errors.
type UnsafeMtaDataServiceServer interface {
	mustEmbedUnimplementedMtaDataServiceServer()
}

func RegisterMtaDataServiceServer(s grpc.ServiceRegistrar, srv MtaDataServiceServer) {
	s.RegisterService(&MtaDataService_ServiceDesc, srv)
}

func _MtaDataService_GetStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetStation(ctx, req.(*StationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetStations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetStations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetStations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetStations(ctx, req.(*StationsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetUpcomingTrains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpcomingTrainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetUpcomingTrains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetUpcomingTrains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetUpcomingTrains(ctx, req.(*UpcomingTrainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetStationComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationComplexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetStationComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetStationComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetStationComplex(ctx, req.(*StationComplexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetStationComplexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StationComplexesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetStationComplexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetStationComplexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetStationComplexes(ctx, req.(*StationComplexesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetAllRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetAllRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetAllRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetAllRoutes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetAllBoroughs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetAllBoroughs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetAllBoroughs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetAllBoroughs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetAllDivisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetAllDivisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetAllDivisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetAllDivisions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MtaDataService_GetAllStructures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MtaDataServiceServer).GetAllStructures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtadata.v1.MtaDataService/GetAllStructures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MtaDataServiceServer).GetAllStructures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MtaDataService_ServiceDesc is the grpc.ServiceDesc for MtaDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MtaDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtadata.v1.MtaDataService",
	HandlerType: (*MtaDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStation",
			Handler:    _MtaDataService_GetStation_Handler,
		},
		{
			MethodName: "GetStations",
			Handler:    _MtaDataService_GetStations_Handler,
		},
		{
			MethodName: "GetUpcomingTrains",
			Handler:    _MtaDataService_GetUpcomingTrains_Handler,
		},
		{
			MethodName: "GetStationComplex",
			Handler:    _MtaDataService_GetStationComplex_Handler,
		},
		{
			MethodName: "GetStationComplexes",
			Handler:    _MtaDataService_GetStationComplexes_Handler,
		},
		{
			MethodName: "GetAllRoutes",
			Handler:    _MtaDataService_GetAllRoutes_Handler,
		},
		{
			MethodName: "GetAllBoroughs",
			Handler:    _MtaDataService_GetAllBoroughs_Handler,
		},
		{
			MethodName: "GetAllDivisions",
			Handler:    _MtaDataService_GetAllDivisions_Handler,
		},
		{
			MethodName: "GetAllStructures",
			Handler:    _MtaDataService_GetAllStructures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
